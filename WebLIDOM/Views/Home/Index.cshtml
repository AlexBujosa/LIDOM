@using WebLIDOM.Models;
@using WebLIDOM.utils;
@{

    ViewData["Title"] = "Home Page";
    List<LidomTeam>? lidomTeams = ViewBag.lidomTeams;
    List<Calendar>? calendars = ViewBag.calendars;
    Dictionary<int, string> teamsD = new Dictionary<int, string>();
    List<Calendar> calendarsNotPlayed = calendars.Where(x => x.Status != GameStatus.Past).ToList();
}

<div style="margin-right:40px; margin-left:40px;">
    <div class="row">
        <div class="col-lg-8 col-md-12">
            <table class="table">
                <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Equipos</th>
                    <th scope="col">Estadios</th>
                </tr>
                </thead>
                <tbody>
                    @{
                        int itemCount = 1;
                        foreach (LidomTeam lidomTeam in lidomTeams)
                        {
                            int teamId = lidomTeam.Id ?? 0;
                            teamsD.Add(teamId, lidomTeam.Name!);
                                    <tr>
                                        <th scope="row">@itemCount</th>
                                        <td>@lidomTeam.Name</td>
                                        <td>@lidomTeam.Home</td>
                                    </tr>

                            itemCount++;
                        }
                    }
                </tbody>
            </table>
        </div>
         <div class="col-lg-4 col-md-12">
            @Html.Partial("Calendar")
        </div>

    </div>
</div>

<div style="margin-right:40px; margin-left:40px;">
    <div class="row">
        <div class="col-12">
            <table class="table">
            <thead>
            <tr>
                <th scope="col">Equipo 1</th>
                <th scope="col">Equipo 2</th>
                <th scope="col">Estadio</th>
                <th scope="col">Dia de juego</th>
                <th scope="col">Acciones</th>
            </tr>
            </thead>
            <tbody>
            @{
                for (int i = 0; i < calendarsNotPlayed.Count; i++)
                {
                            <tr>
                                <td>@teamsD[calendarsNotPlayed[i].Id_FirstTeam]</td>
                                <td>@teamsD[calendarsNotPlayed[i].Id_SecondTeam]</td>
                                <td>@calendarsNotPlayed[i].Home</td>
                                <td>@calendarsNotPlayed[i].GameDate.ToString("D", new System.Globalization.CultureInfo("es-ES"))</td>
                                <td class="d-flex">
                                    <button class="btn btn-warning" style="margin-right:10px;" data-id="@calendarsNotPlayed[i].Id" onclick="editCalendar(this)">
                                        <img src="~/image/editar.png" style="height:15px;"/>
                                    </button>
                                    <form method="post" asp-action="DeleteCalendar" asp-controller="Calendar">
                                        <input type="hidden" name="calendarId" value="@calendarsNotPlayed[i].Id"/>
                                        <button class="btn btn-danger" style="margin-right:10px;" type="submit">
                                            <img src="~/image/borrar.png" style="height:15px;"/>
                                        </button>
                                    </form>
                                     <button class="btn btn-primary" style="margin-right:10px;" data-id="@calendarsNotPlayed[i].Id" onclick="addStadistic(this)">
                                        <img src="~/image/medalla.png" style="height:18px;"/>
                                    </button>
                                </td>
                            </tr>
                }
            }
            </tbody>
        </table>
        </div>
    </div>
</div>
@Html.Partial("AddStadistic")
@Html.Partial("AddCalendar");
@Html.Partial("UpdateCalendar")
@Html.Partial("_ActionResponse", "Shared")


 <script src="~/js/calendar/option.js"></script>

<script>
    var colors = {
        0: "bg-info text-light",
        1: "bg-success text-light",
        2: "bg-warning text-light"
    };

    var calendarsC = [];
    var lidomTeamsC = [];
    var currentDate;

    lidomTeamsC = @Html.Raw(Json.Serialize(lidomTeams));
    calendarsC = @Html.Raw(Json.Serialize(calendars));

    var selectorCurrent1 = {
        value: 0,
        selected: false
    }

    var selectorCurrent2 = {
        value: 0,
        selected: false
    }

    var lidomTeamsSelected = {
        0: {},
        1: {}
    }

    var selector1 = document.getElementById("sel-1");
    var selector2 = document.getElementById("sel-2");
    var selector3 = document.getElementById("sel-3");
    var selector4 = document.getElementById("sel-4");

    var options1 = [];
    var options2 = [];
    var optionsHome = [];

   lidomTeamsC.forEach((lidomTeam)=> {
        var option1 = newOption(lidomTeam.id, lidomTeam.name);
        var option2 = newOption(lidomTeam.id, lidomTeam.name);
        selector1.appendChild(option1);
        selector2.appendChild(option2);

        options1.push(option1);
        options2.push(option2);
    });

    const transformedData = calendarsC.map((cal)=> {
        return {
             [cal.gameDate.substring(0,10)]: {
                modifier: colors[cal.status],
                html: "Meeting at " + cal.gameDate.substring(11,16)
            }
        }
    });

    const popup = Object.assign({}, ...transformedData);
</script>

<script>
    selector1.addEventListener("change", function(e){
        var selectorValue = parseInt(selector1.value);

        selectedOption(selectorValue, options2, selector2, selectorCurrent1);
        
        lidomTeamsSelected[0] = lidomTeamsC.find((lidom)=>{
              return lidom.id === selectorValue;
        });

        stadiumOption(lidomTeamsSelected, selector3);
    });

    selector2.addEventListener("change", function(){
        var selectorValue = parseInt(selector2.value);

        selectedOption(selectorValue, options1, selector1, selectorCurrent2);
         
        lidomTeamsSelected[1] = lidomTeamsC.find((lidom)=>{
              return lidom.id === selectorValue;
        })

        stadiumOption(lidomTeamsSelected, selector3);
    });
</script>

<script>
    const updateCalendar = document.getElementById("update-calendar-popup");
    var calendarsNotPlayed =  @Html.Raw(Json.Serialize(calendarsNotPlayed));
    
    const editCalendar = (button) => {
        const recordId = button.getAttribute("data-id");
        var calendarNotPlayed = calendarsNotPlayed.find(x => x.id == parseInt(recordId));
        const calendarInputId = document.getElementById("input-calendar-id");
        const updateSelectorStadium = document.getElementById("update-sel-stadium");
        const updateSelectorGameDate = document.getElementById("update-sel-gamedate");
        const updateSelectorStatus = document.getElementById("update-sel-status");
        const updateInputGameDate = document.getElementById("update-input-gamedate");
        var selectedStadium = 0;

        //Asignar el id del calendar
        calendarInputId.value = calendarNotPlayed.id;

        //Filtering LidomTeam Option
        const filterLidomTeamC = lidomTeamsC.filter((lidomTeam) => {
            return calendarNotPlayed.id_FirstTeam === lidomTeam.id || calendarNotPlayed.id_SecondTeam === lidomTeam.id;
        })

        filterLidomTeamC.forEach((lidomTeam)=> {
            //Assign selected stadium
            if(lidomTeam.home === calendarNotPlayed.home){
                selectedStadium = lidomTeam.home;
            }
            //Creating Selector Stadium
            var option = newOption(lidomTeam.home, lidomTeam.home);
            updateSelectorStadium.appendChild(option);
           
        });

        //Assign the current value to Selector Stadium
        setSelectedOption(updateSelectorStadium, selectedStadium);

        //Assign the current GameDate
        const gameDateCalendarNotPlayed = calendarNotPlayed.gameDate.split("T")[0];
        updateInputGameDate.value = gameDateCalendarNotPlayed;

        //Creating Hour Option
        generateHourOption(updateSelectorGameDate, "");

        //Assign the current GameDate to select option
        setSelectedOption(updateSelectorGameDate, calendarNotPlayed.gameDate.split("T")[1]);

         //Assign the current Status to select option
        setSelectedOption(updateSelectorStatus, calendarNotPlayed.status.toString());
        

        updateCalendar.style.display = "flex";
       
    }

    const closePopupUpdate = document.getElementById("close-popup-update");
    closePopupUpdate.addEventListener('click', ()=>{
        updateCalendar.style.display = "none";
    });
</script>

<script>
    const addStadisticPopup = document.getElementById("add-stadistic-popup");

    const addStadistic = (button) => {
        const recordId = button.getAttribute("data-id");
        var calendarNotPlayed = calendarsNotPlayed.find(x => x.id == parseInt(recordId));

        const inputIdCalendar =   document.getElementById("input-id-calendar");
        const inputIdFirstTeam =  document.getElementById("input-id-firstteam");
        const inputIdSecondTeam = document.getElementById("input-id-secondteam");
        const winnerSelector = document.getElementById("winner-selector");

        const filterLidomTeams = lidomTeamsC.filter((lidomTeam) => {
            return calendarNotPlayed.id_FirstTeam === lidomTeam.id || calendarNotPlayed.id_SecondTeam === lidomTeam.id;
        });

        filterLidomTeams.forEach((lidomTeam)=> {
            var option = newOption(lidomTeam.id, lidomTeam.name);
            winnerSelector.appendChild(option);
        });


        inputIdCalendar.value = calendarNotPlayed.id;
        inputIdFirstTeam.value = calendarNotPlayed.id_FirstTeam;
        inputIdSecondTeam.value = calendarNotPlayed.id_SecondTeam;
   
        addStadisticPopup.style.display = "flex";
    }

    const closeStadisticPopup = document.getElementById("close-stadistic-popup");
    closeStadisticPopup.addEventListener('click', ()=>{
        addStadisticPopup.style.display ="none";
    });
</script>


<script>
    // Get a reference to the closePopup element
    var closePopup = document.getElementById("closePopup");

    // Add a click event listener to it
    closePopup.addEventListener("click", function() {
        // This code will be executed when closePopup is clicked
        var popup = document.getElementById("popup");
        popup.style.display = "none"; // Hide the popup
    });

</script>


<script src="~/js/calendar/calendar.js"></script>

